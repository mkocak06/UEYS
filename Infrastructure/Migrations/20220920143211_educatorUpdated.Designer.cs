// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220920143211_educatorUpdated")]
    partial class educatorUpdated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Affiliation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FacultyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HospitalId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ProtocolDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProtocolEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProtocolNo")
                        .HasColumnType("text");

                    b.Property<long?>("UniversityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Affiliations");
                });

            modelBuilder.Entity("Core.Entities.AuthorizationCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuthorizationCategories");
                });

            modelBuilder.Entity("Core.Entities.AuthorizationDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AuthorizationCategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("AuthorizationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuthorizationDecisionNo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AuthorizationEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("ProgramId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("VisitDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationCategoryId");

                    b.HasIndex("ProgramId");

                    b.ToTable("AuthorizationDetails");
                });

            modelBuilder.Entity("Core.Entities.Curriculum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ExpertiseBranchId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExpertiseBranchId");

                    b.ToTable("Curricula");
                });

            modelBuilder.Entity("Core.Entities.DependentProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DecisionNo")
                        .HasColumnType("text");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<bool?>("IsAdministratorProgram")
                        .HasColumnType("boolean");

                    b.Property<long?>("ProgramId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ProtocolDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ProtocolProgramId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ProtocolProgramId");

                    b.ToTable("DependentPrograms");
                });

            modelBuilder.Entity("Core.Entities.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BucketKey")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("bytea");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text");

                    b.Property<bool?>("IsApprove")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MimeType")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ServiceUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Core.Entities.EducationTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("AdditionalDays")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ProcessOwnerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProcessType")
                        .HasColumnType("integer");

                    b.Property<long?>("ReasonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProcessOwnerId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("StudentId");

                    b.ToTable("EducationTrackings");
                });

            modelBuilder.Entity("Core.Entities.Educator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AcademicTitleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EducatorStatus")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsCoordinator")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("StaffTitleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AcademicTitleId");

                    b.HasIndex("StaffTitleId");

                    b.HasIndex("UserId");

                    b.ToTable("Educators");
                });

            modelBuilder.Entity("Core.Entities.EducatorDependentProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("DependentProgramId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DependentProgramId");

                    b.HasIndex("EducatorId");

                    b.ToTable("EducatorDependentPrograms");
                });

            modelBuilder.Entity("Core.Entities.EducatorExpertiseBranch", b =>
                {
                    b.Property<long?>("ExpertiseBranchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.HasKey("ExpertiseBranchId", "EducatorId");

                    b.HasIndex("EducatorId");

                    b.ToTable("EducatorExpertiseBranches");
                });

            modelBuilder.Entity("Core.Entities.EducatorProgram", b =>
                {
                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProgramId")
                        .HasColumnType("bigint");

                    b.HasKey("EducatorId", "ProgramId");

                    b.HasIndex("ProgramId");

                    b.ToTable("EducatorPrograms");
                });

            modelBuilder.Entity("Core.Entities.ExpertiseBranch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("PrincipalBranchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProfessionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PrincipalBranchId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("ExpertiseBranches");
                });

            modelBuilder.Entity("Core.Entities.Faculty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Adress")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<long>("UniversityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("Core.Entities.Hospital", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<long?>("FacultyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InstitutionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<long?>("ManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("Core.Entities.Institution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("Core.Entities.Jury", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("JuryType")
                        .HasColumnType("integer");

                    b.Property<long?>("ThesisId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.HasIndex("ThesisId");

                    b.ToTable("Juries");
                });

            modelBuilder.Entity("Core.Entities.OpinionForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalExplanation")
                        .HasColumnType("text");

                    b.Property<int>("BroadcastingAbility")
                        .HasColumnType("integer");

                    b.Property<int>("ComplianceToWorkingHours_DC")
                        .HasColumnType("integer");

                    b.Property<int>("ComplianceToWorkingHours_MS")
                        .HasColumnType("integer");

                    b.Property<int>("ComplianceToWorkingHours_PE")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DutyAccomplishment_DC")
                        .HasColumnType("integer");

                    b.Property<int>("DutyAccomplishment_MS")
                        .HasColumnType("integer");

                    b.Property<int>("DutyAccomplishment_PE")
                        .HasColumnType("integer");

                    b.Property<int>("DutyExecution_DC")
                        .HasColumnType("integer");

                    b.Property<int>("DutyExecution_MS")
                        .HasColumnType("integer");

                    b.Property<int>("DutyExecution_PE")
                        .HasColumnType("integer");

                    b.Property<int>("DutyResponsibility_DC")
                        .HasColumnType("integer");

                    b.Property<int>("DutyResponsibility_MS")
                        .HasColumnType("integer");

                    b.Property<int>("DutyResponsibility_PE")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ProfessionalPracticeAbility")
                        .HasColumnType("integer");

                    b.Property<int>("ResearchDesire")
                        .HasColumnType("integer");

                    b.Property<int>("ResearchExecutionAndAccomplish")
                        .HasColumnType("integer");

                    b.Property<int>("Scientificness")
                        .HasColumnType("integer");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<int>("TeamworkAdaptation")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UsingResourcesEfficiently")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("OpinionForms");
                });

            modelBuilder.Entity("Core.Entities.Perfection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CurriculumId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PerfectionGroup")
                        .HasColumnType("text");

                    b.Property<string>("PerfectionLevel")
                        .HasColumnType("text");

                    b.Property<string>("PerfectionMethod")
                        .HasColumnType("text");

                    b.Property<string>("PerfectionName")
                        .HasColumnType("text");

                    b.Property<string>("PerfectionSeniorty")
                        .HasColumnType("text");

                    b.Property<string>("PerfectionType")
                        .HasColumnType("text");

                    b.Property<long?>("RotationId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("RotationId");

                    b.ToTable("Perfections");
                });

            modelBuilder.Entity("Core.Entities.PerformanceRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ExpertiseBranchId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("ProgramDirectorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RatingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RatingPeriod")
                        .HasColumnType("integer");

                    b.Property<int?>("RatingResult")
                        .HasColumnType("integer");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExpertiseBranchId");

                    b.HasIndex("ProgramDirectorId");

                    b.HasIndex("StudentId");

                    b.ToTable("PerformanceRatings");
                });

            modelBuilder.Entity("Core.Entities.Profession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("Core.Entities.Program", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ExpertiseBranchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FacultyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HospitalId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("ManagerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExpertiseBranchId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("Core.Entities.ProtocolProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CancelingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CancelingProtocolNo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("ParentProgramId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ProtocolDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProtocolNo")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentProgramId");

                    b.ToTable("ProtocolPrograms");
                });

            modelBuilder.Entity("Core.Entities.Province", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Core.Entities.Reason", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("ProcessTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Reasons");
                });

            modelBuilder.Entity("Core.Entities.Rotation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CurriculumId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ExpertiseBranchId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("ExpertiseBranchId");

                    b.ToTable("Rotations");
                });

            modelBuilder.Entity("Core.Entities.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AdvisorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CurriculumId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("ProgramId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Core.Entities.StudentPerfection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("PerfectionId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentRotationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PerfectionId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentRotationId");

                    b.ToTable("StudentPerfections");
                });

            modelBuilder.Entity("Core.Entities.StudentRotation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("RotationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RotationId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentRotations");
                });

            modelBuilder.Entity("Core.Entities.Svg", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("IconType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Svgs");
                });

            modelBuilder.Entity("Core.Entities.Thesis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("AdvisorAssignDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("AdvisorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EthicComitteeDecision")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Result")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubjectDetermineDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("StudentId");

                    b.ToTable("Theses");
                });

            modelBuilder.Entity("Core.Entities.Title", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("TitleType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("Core.Entities.University", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<long?>("InstitutionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<long?>("ManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WebAddress")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("IdentityNo")
                        .HasColumnType("text");

                    b.Property<long?>("InstitutionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsForeign")
                        .HasColumnType("boolean");

                    b.Property<string>("MotherName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("NationalityCode")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Koru.Data.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PermissionGroup")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Koru.Data.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Koru.Data.RolePermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Koru.Data.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.Affiliation", b =>
                {
                    b.HasOne("Core.Entities.Faculty", "Faculty")
                        .WithMany("Affiliations")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Hospital", "Hospital")
                        .WithMany("Affiliations")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.University", null)
                        .WithMany("Affiliations")
                        .HasForeignKey("UniversityId");

                    b.Navigation("Faculty");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Core.Entities.AuthorizationDetail", b =>
                {
                    b.HasOne("Core.Entities.AuthorizationCategory", "AuthorizationCategory")
                        .WithMany("AuthorizationDetails")
                        .HasForeignKey("AuthorizationCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Program", "Program")
                        .WithMany("AuthorizationDetails")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AuthorizationCategory");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Core.Entities.Curriculum", b =>
                {
                    b.HasOne("Core.Entities.ExpertiseBranch", "ExpertiseBranch")
                        .WithMany("Curricula")
                        .HasForeignKey("ExpertiseBranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ExpertiseBranch");
                });

            modelBuilder.Entity("Core.Entities.DependentProgram", b =>
                {
                    b.HasOne("Core.Entities.Program", "Program")
                        .WithMany("DependentPrograms")
                        .HasForeignKey("ProgramId");

                    b.HasOne("Core.Entities.ProtocolProgram", "ProtocolProgram")
                        .WithMany("ChildPrograms")
                        .HasForeignKey("ProtocolProgramId");

                    b.Navigation("Program");

                    b.Navigation("ProtocolProgram");
                });

            modelBuilder.Entity("Core.Entities.EducationTracking", b =>
                {
                    b.HasOne("Core.Entities.User", "ProcessOwner")
                        .WithMany("EducationTrackings")
                        .HasForeignKey("ProcessOwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Reason", "Reason")
                        .WithMany("EducationTrackings")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("EducationTrackings")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProcessOwner");

                    b.Navigation("Reason");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.Educator", b =>
                {
                    b.HasOne("Core.Entities.Title", "AcademicTitle")
                        .WithMany("AcademicEducators")
                        .HasForeignKey("AcademicTitleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Title", "StaffTitle")
                        .WithMany("StaffEducators")
                        .HasForeignKey("StaffTitleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("Educators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AcademicTitle");

                    b.Navigation("StaffTitle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.EducatorDependentProgram", b =>
                {
                    b.HasOne("Core.Entities.DependentProgram", "DependentProgram")
                        .WithMany("EducatorDependentPrograms")
                        .HasForeignKey("DependentProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("EducatorDependentPrograms")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DependentProgram");

                    b.Navigation("Educator");
                });

            modelBuilder.Entity("Core.Entities.EducatorExpertiseBranch", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("EducatorExpertiseBranches")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.ExpertiseBranch", "ExpertiseBranch")
                        .WithMany("EducatorExpertiseBranches")
                        .HasForeignKey("ExpertiseBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Educator");

                    b.Navigation("ExpertiseBranch");
                });

            modelBuilder.Entity("Core.Entities.EducatorProgram", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("EducatorPrograms")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Program", "Program")
                        .WithMany("EducatorPrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Educator");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Core.Entities.ExpertiseBranch", b =>
                {
                    b.HasOne("Core.Entities.ExpertiseBranch", "PrincipalBranch")
                        .WithMany("SubBranches")
                        .HasForeignKey("PrincipalBranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Profession", "Profession")
                        .WithMany("ExpertiseBranches")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PrincipalBranch");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("Core.Entities.Faculty", b =>
                {
                    b.HasOne("Core.Entities.University", "University")
                        .WithMany("Faculties")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Core.Entities.Hospital", b =>
                {
                    b.HasOne("Core.Entities.Faculty", "Faculty")
                        .WithMany("Hospitals")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Institution", "Institution")
                        .WithMany("Hospitals")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.User", "Manager")
                        .WithMany("Hospitals")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Province", "Province")
                        .WithMany("Hospitals")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Faculty");

                    b.Navigation("Institution");

                    b.Navigation("Manager");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Core.Entities.Jury", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("Juries")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Thesis", "Thesis")
                        .WithMany("Juries")
                        .HasForeignKey("ThesisId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Educator");

                    b.Navigation("Thesis");
                });

            modelBuilder.Entity("Core.Entities.OpinionForm", b =>
                {
                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("OpinionForms")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.Perfection", b =>
                {
                    b.HasOne("Core.Entities.Curriculum", "Curriculum")
                        .WithMany("Perfections")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Rotation", null)
                        .WithMany("Perfections")
                        .HasForeignKey("RotationId");

                    b.Navigation("Curriculum");
                });

            modelBuilder.Entity("Core.Entities.PerformanceRating", b =>
                {
                    b.HasOne("Core.Entities.ExpertiseBranch", "ExpertiseBranch")
                        .WithMany("PerformanceRatings")
                        .HasForeignKey("ExpertiseBranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Educator", "ProgramDirector")
                        .WithMany("PerformanceRatings")
                        .HasForeignKey("ProgramDirectorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("PerformanceRatings")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ExpertiseBranch");

                    b.Navigation("ProgramDirector");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.Program", b =>
                {
                    b.HasOne("Core.Entities.ExpertiseBranch", "ExpertiseBranch")
                        .WithMany("Programs")
                        .HasForeignKey("ExpertiseBranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Faculty", "Faculty")
                        .WithMany("Programs")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Hospital", "Hospital")
                        .WithMany("Programs")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.User", "Manager")
                        .WithMany("Programs")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ExpertiseBranch");

                    b.Navigation("Faculty");

                    b.Navigation("Hospital");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Core.Entities.ProtocolProgram", b =>
                {
                    b.HasOne("Core.Entities.Program", "ParentProgram")
                        .WithMany("ParentPrograms")
                        .HasForeignKey("ParentProgramId");

                    b.Navigation("ParentProgram");
                });

            modelBuilder.Entity("Core.Entities.Rotation", b =>
                {
                    b.HasOne("Core.Entities.Curriculum", "Curriculum")
                        .WithMany("Rotations")
                        .HasForeignKey("CurriculumId");

                    b.HasOne("Core.Entities.ExpertiseBranch", "ExpertiseBranch")
                        .WithMany("Rotations")
                        .HasForeignKey("ExpertiseBranchId");

                    b.Navigation("Curriculum");

                    b.Navigation("ExpertiseBranch");
                });

            modelBuilder.Entity("Core.Entities.Student", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Advisor")
                        .WithMany("Students")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Curriculum", "Curriculum")
                        .WithMany("Students")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Program", "Program")
                        .WithMany("Students")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Advisor");

                    b.Navigation("Curriculum");

                    b.Navigation("Program");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.StudentPerfection", b =>
                {
                    b.HasOne("Core.Entities.Perfection", "Perfection")
                        .WithMany("StudentPerfections")
                        .HasForeignKey("PerfectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("StudentPerfections")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.StudentRotation", null)
                        .WithMany("StudentRotationPerfections")
                        .HasForeignKey("StudentRotationId");

                    b.Navigation("Perfection");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.StudentRotation", b =>
                {
                    b.HasOne("Core.Entities.Rotation", "Rotation")
                        .WithMany("StudentRotations")
                        .HasForeignKey("RotationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("StudentRotations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Rotation");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.Thesis", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Advisor")
                        .WithMany("Theses")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("Theses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Advisor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.University", b =>
                {
                    b.HasOne("Core.Entities.Institution", "Institution")
                        .WithMany("Universities")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.User", "Manager")
                        .WithMany("Universities")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Province", "Province")
                        .WithMany("Universities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Institution");

                    b.Navigation("Manager");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.HasOne("Core.Entities.Institution", "Institution")
                        .WithMany("Users")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Province", "Province")
                        .WithMany("Users")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Institution");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Koru.Data.RolePermission", b =>
                {
                    b.HasOne("Koru.Data.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Koru.Data.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Koru.Data.UserRole", b =>
                {
                    b.HasOne("Koru.Data.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.AuthorizationCategory", b =>
                {
                    b.Navigation("AuthorizationDetails");
                });

            modelBuilder.Entity("Core.Entities.Curriculum", b =>
                {
                    b.Navigation("Perfections");

                    b.Navigation("Rotations");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Core.Entities.DependentProgram", b =>
                {
                    b.Navigation("EducatorDependentPrograms");
                });

            modelBuilder.Entity("Core.Entities.Educator", b =>
                {
                    b.Navigation("EducatorDependentPrograms");

                    b.Navigation("EducatorExpertiseBranches");

                    b.Navigation("EducatorPrograms");

                    b.Navigation("Juries");

                    b.Navigation("PerformanceRatings");

                    b.Navigation("Students");

                    b.Navigation("Theses");
                });

            modelBuilder.Entity("Core.Entities.ExpertiseBranch", b =>
                {
                    b.Navigation("Curricula");

                    b.Navigation("EducatorExpertiseBranches");

                    b.Navigation("PerformanceRatings");

                    b.Navigation("Programs");

                    b.Navigation("Rotations");

                    b.Navigation("SubBranches");
                });

            modelBuilder.Entity("Core.Entities.Faculty", b =>
                {
                    b.Navigation("Affiliations");

                    b.Navigation("Hospitals");

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("Core.Entities.Hospital", b =>
                {
                    b.Navigation("Affiliations");

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("Core.Entities.Institution", b =>
                {
                    b.Navigation("Hospitals");

                    b.Navigation("Universities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Entities.Perfection", b =>
                {
                    b.Navigation("StudentPerfections");
                });

            modelBuilder.Entity("Core.Entities.Profession", b =>
                {
                    b.Navigation("ExpertiseBranches");
                });

            modelBuilder.Entity("Core.Entities.Program", b =>
                {
                    b.Navigation("AuthorizationDetails");

                    b.Navigation("DependentPrograms");

                    b.Navigation("EducatorPrograms");

                    b.Navigation("ParentPrograms");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Core.Entities.ProtocolProgram", b =>
                {
                    b.Navigation("ChildPrograms");
                });

            modelBuilder.Entity("Core.Entities.Province", b =>
                {
                    b.Navigation("Hospitals");

                    b.Navigation("Universities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Entities.Reason", b =>
                {
                    b.Navigation("EducationTrackings");
                });

            modelBuilder.Entity("Core.Entities.Rotation", b =>
                {
                    b.Navigation("Perfections");

                    b.Navigation("StudentRotations");
                });

            modelBuilder.Entity("Core.Entities.Student", b =>
                {
                    b.Navigation("EducationTrackings");

                    b.Navigation("OpinionForms");

                    b.Navigation("PerformanceRatings");

                    b.Navigation("StudentPerfections");

                    b.Navigation("StudentRotations");

                    b.Navigation("Theses");
                });

            modelBuilder.Entity("Core.Entities.StudentRotation", b =>
                {
                    b.Navigation("StudentRotationPerfections");
                });

            modelBuilder.Entity("Core.Entities.Thesis", b =>
                {
                    b.Navigation("Juries");
                });

            modelBuilder.Entity("Core.Entities.Title", b =>
                {
                    b.Navigation("AcademicEducators");

                    b.Navigation("StaffEducators");
                });

            modelBuilder.Entity("Core.Entities.University", b =>
                {
                    b.Navigation("Affiliations");

                    b.Navigation("Faculties");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("EducationTrackings");

                    b.Navigation("Educators");

                    b.Navigation("Hospitals");

                    b.Navigation("Programs");

                    b.Navigation("Students");

                    b.Navigation("Universities");
                });

            modelBuilder.Entity("Koru.Data.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Koru.Data.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
