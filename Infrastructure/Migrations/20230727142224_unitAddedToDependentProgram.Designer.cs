// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230727142224_unitAddedToDependentProgram")]
    partial class unitAddedToDependentProgram
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.AdvisorThesis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("AdvisorAssignDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsCoordinator")
                        .HasColumnType("boolean");

                    b.Property<long>("ThesisId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.HasIndex("ThesisId");

                    b.ToTable("AdvisorTheses");
                });

            modelBuilder.Entity("Core.Entities.Affiliation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FacultyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HospitalId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ProtocolDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProtocolEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProtocolNo")
                        .HasColumnType("text");

                    b.Property<long?>("UniversityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Affiliations");
                });

            modelBuilder.Entity("Core.Entities.AuthorizationCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuthorizationCategories");
                });

            modelBuilder.Entity("Core.Entities.AuthorizationDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AuthorizationCategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("AuthorizationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuthorizationDecisionNo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AuthorizationEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("ProgramId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("VisitDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationCategoryId");

                    b.HasIndex("ProgramId");

                    b.ToTable("AuthorizationDetails");
                });

            modelBuilder.Entity("Core.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Core.Entities.Curriculum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DecisionNo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ExpertiseBranchId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExpertiseBranchId");

                    b.ToTable("Curricula");
                });

            modelBuilder.Entity("Core.Entities.CurriculumPerfection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CurriculumId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("PerfectionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("PerfectionId");

                    b.ToTable("CurriculumPerfections");
                });

            modelBuilder.Entity("Core.Entities.CurriculumRotation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CurriculumId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("RotationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("RotationId");

                    b.ToTable("CurriculumRotations");
                });

            modelBuilder.Entity("Core.Entities.Demand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Demands");
                });

            modelBuilder.Entity("Core.Entities.DependentProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsAdministratorProgram")
                        .HasColumnType("boolean");

                    b.Property<long?>("ProgramId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RelatedDependentProgramId")
                        .HasColumnType("bigint");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.HasIndex("RelatedDependentProgramId");

                    b.ToTable("DependentPrograms");
                });

            modelBuilder.Entity("Core.Entities.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BucketKey")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("bytea");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text");

                    b.Property<bool?>("IsApprove")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MimeType")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ServiceUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Core.Entities.EducationOfficer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DocumentOrder")
                        .HasColumnType("text");

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ProgramId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.HasIndex("ProgramId");

                    b.ToTable("EducationOfficers");
                });

            modelBuilder.Entity("Core.Entities.EducationTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("AdditionalDays")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignmentType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("ExcusedType")
                        .HasColumnType("integer");

                    b.Property<long?>("FormerProgramId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ProcessOwnerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProcessType")
                        .HasColumnType("integer");

                    b.Property<long?>("ProgramId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ReasonType")
                        .HasColumnType("integer");

                    b.Property<long?>("RelatedEducationTrackingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentRotationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FormerProgramId");

                    b.HasIndex("ProcessOwnerId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("RelatedEducationTrackingId");

                    b.HasIndex("StudentId");

                    b.ToTable("EducationTrackings");
                });

            modelBuilder.Entity("Core.Entities.Educator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AcademicTitleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeleteReason")
                        .HasColumnType("integer");

                    b.Property<string>("DeleteReasonExplanation")
                        .HasColumnType("text");

                    b.Property<int>("EducatorType")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsConditionalEducator")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("StaffTitleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("TitleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AcademicTitleId");

                    b.HasIndex("StaffTitleId");

                    b.HasIndex("UserId");

                    b.ToTable("Educators");
                });

            modelBuilder.Entity("Core.Entities.EducatorAdministrativeTitle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AdministrativeTitleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AdministrativeTitleId");

                    b.HasIndex("EducatorId");

                    b.ToTable("EducatorAdministrativeTitles");
                });

            modelBuilder.Entity("Core.Entities.EducatorDependentProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("DependentProgramId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsProgramManager")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DependentProgramId");

                    b.HasIndex("EducatorId");

                    b.ToTable("EducatorDependentPrograms");
                });

            modelBuilder.Entity("Core.Entities.EducatorExpertiseBranch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExpertiseBranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegistrationBranchName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RegistrationGraduationSchool")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.HasIndex("ExpertiseBranchId");

                    b.ToTable("EducatorExpertiseBranches");
                });

            modelBuilder.Entity("Core.Entities.EducatorProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DocumentOrder")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DutyEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DutyStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DutyType")
                        .HasColumnType("integer");

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProgramId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.HasIndex("ProgramId");

                    b.ToTable("EducatorPrograms");
                });

            modelBuilder.Entity("Core.Entities.EducatorStaffInstitution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("StaffInstitutionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.HasIndex("StaffInstitutionId");

                    b.ToTable("EducatorStaffInstitutions");
                });

            modelBuilder.Entity("Core.Entities.EducatorStaffParentInstitution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("StaffParentInstitutionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.HasIndex("StaffParentInstitutionId");

                    b.ToTable("EducatorStaffParentInstitutions");
                });

            modelBuilder.Entity("Core.Entities.EthicCommitteeDecision", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<long?>("ThesisId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ThesisId");

                    b.ToTable("EthicCommitteeDecisions");
                });

            modelBuilder.Entity("Core.Entities.ExitExam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("AbilityExamNote")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("EducationTrackingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ExamStatus")
                        .HasColumnType("integer");

                    b.Property<long?>("HospitalId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("PracticeExamNote")
                        .HasColumnType("integer");

                    b.Property<long?>("SecretaryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EducationTrackingId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("SecretaryId");

                    b.HasIndex("StudentId");

                    b.ToTable("ExitExams");
                });

            modelBuilder.Entity("Core.Entities.ExpertiseBranch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<bool?>("IsIntensiveCare")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPrincipal")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ProfessionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProtocolProgramCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.ToTable("ExpertiseBranches");
                });

            modelBuilder.Entity("Core.Entities.Faculty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<long?>("ProfessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UniversityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("Core.Entities.GraduationDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("GraduationDate")
                        .HasColumnType("text");

                    b.Property<string>("GraduationFaculty")
                        .HasColumnType("text");

                    b.Property<string>("GraduationField")
                        .HasColumnType("text");

                    b.Property<string>("GraduationUniversity")
                        .HasColumnType("text");

                    b.Property<string>("HigherEducationDetail")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPhd")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.ToTable("GraduationDetails");
                });

            modelBuilder.Entity("Core.Entities.Hospital", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<long?>("FacultyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InstitutionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WebAddress")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("Core.Entities.Institution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("Core.Entities.Jury", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExitExamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("JuryType")
                        .HasColumnType("integer");

                    b.Property<long?>("ThesisDefenceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.HasIndex("ExitExamId");

                    b.HasIndex("ThesisDefenceId");

                    b.ToTable("Juries");
                });

            modelBuilder.Entity("Core.Entities.Koru.Field", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EntityName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("PermissionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("Core.Entities.Koru.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Description2")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MainGroup")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PermissionGroup")
                        .HasColumnType("text");

                    b.Property<string>("SubGroup")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Core.Entities.Koru.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsAddRole")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Entities.Koru.RoleCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleCategories");
                });

            modelBuilder.Entity("Core.Entities.Koru.RoleField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("FieldId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleFields");
                });

            modelBuilder.Entity("Core.Entities.Koru.RoleMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("MenuId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleMenus");
                });

            modelBuilder.Entity("Core.Entities.Koru.RolePermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Core.Entities.Koru.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.Koru.UserRoleFaculty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ExpertiseBranchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FacultyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExpertiseBranchId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleFaculties");
                });

            modelBuilder.Entity("Core.Entities.Koru.UserRoleHospital", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("HospitalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleHospitals");
                });

            modelBuilder.Entity("Core.Entities.Koru.UserRoleProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ProgramId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRolePrograms");
                });

            modelBuilder.Entity("Core.Entities.Koru.UserRoleProvince", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleProvinces");
                });

            modelBuilder.Entity("Core.Entities.Koru.UserRoleStudent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleStudents");
                });

            modelBuilder.Entity("Core.Entities.Koru.UserRoleUniversity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UniversityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleUniversities");
                });

            modelBuilder.Entity("Core.Entities.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LogType")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserIPAddress")
                        .HasColumnType("text");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Core.Entities.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Core.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Core.Entities.OfficialLetter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("ThesisId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ThesisId");

                    b.ToTable("OfficialLetters");
                });

            modelBuilder.Entity("Core.Entities.OpinionForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalExplanation")
                        .HasColumnType("text");

                    b.Property<int?>("BroadcastingAbility")
                        .HasColumnType("integer");

                    b.Property<int?>("CommunicationSkills")
                        .HasColumnType("integer");

                    b.Property<int?>("ComplianceToWorkingHours_DC")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DutyAccomplishment_DC")
                        .HasColumnType("integer");

                    b.Property<int?>("DutyExecution_DC")
                        .HasColumnType("integer");

                    b.Property<int?>("DutyResponsibility_DC")
                        .HasColumnType("integer");

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("OrganizationAndCoordinationAbility")
                        .HasColumnType("integer");

                    b.Property<int?>("Period")
                        .HasColumnType("integer");

                    b.Property<int?>("ProblemAnalysisAndSolutionAbility")
                        .HasColumnType("integer");

                    b.Property<int?>("ProfessionalPracticeAbility")
                        .HasColumnType("integer");

                    b.Property<long?>("ProgramId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProgramManagerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RelationsWithEducators")
                        .HasColumnType("integer");

                    b.Property<int?>("RelationsWithOtherEmployees")
                        .HasColumnType("integer");

                    b.Property<int?>("RelationsWithOtherStudents")
                        .HasColumnType("integer");

                    b.Property<int?>("RelationsWithPatients")
                        .HasColumnType("integer");

                    b.Property<int?>("ResearchDesire")
                        .HasColumnType("integer");

                    b.Property<int?>("ResearchExecutionAndAccomplish")
                        .HasColumnType("integer");

                    b.Property<int?>("Result")
                        .HasColumnType("integer");

                    b.Property<int?>("Scientificness")
                        .HasColumnType("integer");

                    b.Property<long?>("SecretaryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TeamworkAdaptation")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UsingResourcesEfficiently")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ProgramManagerId");

                    b.HasIndex("SecretaryId");

                    b.HasIndex("StudentId");

                    b.ToTable("OpinionForms");
                });

            modelBuilder.Entity("Core.Entities.Perfection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CurriculumRotationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("PerfectionType")
                        .HasColumnType("integer");

                    b.Property<long?>("RotationId")
                        .HasColumnType("bigint");

                    b.Property<string>("SpecialProvision")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumRotationId");

                    b.HasIndex("RotationId");

                    b.ToTable("Perfections");
                });

            modelBuilder.Entity("Core.Entities.PerfectionProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("PerfectionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PropertyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PerfectionId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PerfectionProperties");
                });

            modelBuilder.Entity("Core.Entities.PerformanceRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("Altruism")
                        .HasColumnType("integer");

                    b.Property<int?>("AppropriateAppealToPeople")
                        .HasColumnType("integer");

                    b.Property<int?>("CommunicationObstacleRemove")
                        .HasColumnType("integer");

                    b.Property<int?>("ConflictResolution")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CrisisManagement")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<int?>("EmbraceLearningAndTeaching")
                        .HasColumnType("integer");

                    b.Property<int?>("Empathy")
                        .HasColumnType("integer");

                    b.Property<int?>("Fair")
                        .HasColumnType("integer");

                    b.Property<int?>("FeedBack")
                        .HasColumnType("integer");

                    b.Property<int?>("FightAddiction")
                        .HasColumnType("integer");

                    b.Property<int?>("HealthProtectionVolunteer")
                        .HasColumnType("integer");

                    b.Property<int?>("HealthRiskAwareness")
                        .HasColumnType("integer");

                    b.Property<int?>("HumanValues")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Leadership")
                        .HasColumnType("integer");

                    b.Property<int?>("LegalLiabilityAwareness")
                        .HasColumnType("integer");

                    b.Property<int?>("LegalLiabilityCompletion")
                        .HasColumnType("integer");

                    b.Property<int?>("LifeStyleChangeRoleModel")
                        .HasColumnType("integer");

                    b.Property<int?>("Listening")
                        .HasColumnType("integer");

                    b.Property<int?>("ManagementTechniquesApply")
                        .HasColumnType("integer");

                    b.Property<int?>("MeetingManagement")
                        .HasColumnType("integer");

                    b.Property<int?>("MotivatePeople")
                        .HasColumnType("integer");

                    b.Property<int?>("NegativeNews")
                        .HasColumnType("integer");

                    b.Property<int?>("Period")
                        .HasColumnType("integer");

                    b.Property<int?>("Result")
                        .HasColumnType("integer");

                    b.Property<int?>("SafetyProviding")
                        .HasColumnType("integer");

                    b.Property<int?>("ScientificThinking")
                        .HasColumnType("integer");

                    b.Property<int?>("StandUpForTeam")
                        .HasColumnType("integer");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TeachingEffort")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WorkInTeam")
                        .HasColumnType("integer");

                    b.Property<int?>("WorkPlaceManagement")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.HasIndex("StudentId");

                    b.ToTable("PerformanceRatings");
                });

            modelBuilder.Entity("Core.Entities.Profession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("Core.Entities.Program", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ExpertiseBranchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FacultyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HospitalId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("ManagerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExpertiseBranchId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("Core.Entities.ProgressReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("ThesisId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.HasIndex("ThesisId");

                    b.ToTable("ProgressReports");
                });

            modelBuilder.Entity("Core.Entities.Property", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PerfectionType")
                        .HasColumnType("integer");

                    b.Property<int>("PropertyType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Core.Entities.ProtocolProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CancelingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CancelingProtocolNo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DecisionNo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("ParentProgramId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProtocolNo")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentProgramId");

                    b.ToTable("ProtocolPrograms");
                });

            modelBuilder.Entity("Core.Entities.Province", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Core.Entities.RelatedDependentProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DecisionNo")
                        .HasColumnType("text");

                    b.Property<long?>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("ProtocolProgramId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Revision")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolProgramId");

                    b.ToTable("RelatedDependentProgram");
                });

            modelBuilder.Entity("Core.Entities.RelatedExpertiseBranch", b =>
                {
                    b.Property<long>("PrincipalBranchId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubBranchId")
                        .HasColumnType("bigint");

                    b.HasKey("PrincipalBranchId", "SubBranchId");

                    b.HasIndex("SubBranchId");

                    b.ToTable("RelatedExpertiseBranches");
                });

            modelBuilder.Entity("Core.Entities.Rotation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<long?>("ExpertiseBranchId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExpertiseBranchId");

                    b.ToTable("Rotations");
                });

            modelBuilder.Entity("Core.Entities.ScientificStudy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudyId");

                    b.ToTable("ScientificStudies");
                });

            modelBuilder.Entity("Core.Entities.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AdvisorId")
                        .HasColumnType("bigint");

                    b.Property<int?>("BeginningExam")
                        .HasColumnType("integer");

                    b.Property<int?>("BeginningPeriod")
                        .HasColumnType("integer");

                    b.Property<int?>("BeginningYear")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CurriculumId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeleteReason")
                        .HasColumnType("text");

                    b.Property<string>("GraduatedDate")
                        .HasColumnType("text");

                    b.Property<string>("GraduatedSchool")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MedicineRegistrationDate")
                        .HasColumnType("text");

                    b.Property<string>("MedicineRegistrationNo")
                        .HasColumnType("text");

                    b.Property<string>("OrcidNumber")
                        .HasColumnType("text");

                    b.Property<long?>("OriginalProgramId")
                        .HasColumnType("bigint");

                    b.Property<double?>("PlacementScore")
                        .HasColumnType("double precision");

                    b.Property<long?>("ProgramId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProtocolProgramId")
                        .HasColumnType("bigint");

                    b.Property<int?>("QuotaType_1")
                        .HasColumnType("integer");

                    b.Property<int?>("QuotaType_2")
                        .HasColumnType("integer");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<bool?>("TransferredDueToOpinion")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("OriginalProgramId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ProtocolProgramId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Core.Entities.StudentExpertiseBranch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ExpertiseBranchId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExpertiseBranchId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentExpertiseBranches");
                });

            modelBuilder.Entity("Core.Entities.StudentPerfection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Experience")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<long?>("PerfectionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ProgramId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.HasIndex("PerfectionId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPerfections");
                });

            modelBuilder.Entity("Core.Entities.StudentRotation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ProcessDateForExemption")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ProgramId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RotationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("RotationId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentRotations");
                });

            modelBuilder.Entity("Core.Entities.StudentRotationPerfection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<long?>("PerfectionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("StudentRotationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.HasIndex("PerfectionId");

                    b.HasIndex("StudentRotationId");

                    b.ToTable("StudentRotationPerfections");
                });

            modelBuilder.Entity("Core.Entities.Study", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Studies");
                });

            modelBuilder.Entity("Core.Entities.Thesis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubjectDetermineDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ThesisSubjectType_1")
                        .HasColumnType("integer");

                    b.Property<int>("ThesisSubjectType_2")
                        .HasColumnType("integer");

                    b.Property<string>("ThesisTitle")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ThesisTitleDetermineDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.HasIndex("StudentId");

                    b.ToTable("Theses");
                });

            modelBuilder.Entity("Core.Entities.ThesisDefence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DefenceOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("HospitalId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Result")
                        .HasColumnType("integer");

                    b.Property<long?>("ThesisId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("ThesisId");

                    b.ToTable("ThesisDefences");
                });

            modelBuilder.Entity("Core.Entities.Title", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("TitleType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("Core.Entities.University", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<long?>("InstitutionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<long?>("ManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WebAddress")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("text");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<int?>("ForeignType")
                        .HasColumnType("integer");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("IdentityNo")
                        .HasColumnType("text");

                    b.Property<long?>("InstitutionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsForeign")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReadClarification")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MotherName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Entities.UserNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<long?>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Core.Entities.AdvisorThesis", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("AdvisorTheses")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Thesis", "Thesis")
                        .WithMany("AdvisorTheses")
                        .HasForeignKey("ThesisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Educator");

                    b.Navigation("Thesis");
                });

            modelBuilder.Entity("Core.Entities.Affiliation", b =>
                {
                    b.HasOne("Core.Entities.Faculty", "Faculty")
                        .WithMany("Affiliations")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Hospital", "Hospital")
                        .WithMany("Affiliations")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.University", null)
                        .WithMany("Affiliations")
                        .HasForeignKey("UniversityId");

                    b.Navigation("Faculty");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Core.Entities.AuthorizationDetail", b =>
                {
                    b.HasOne("Core.Entities.AuthorizationCategory", "AuthorizationCategory")
                        .WithMany("AuthorizationDetails")
                        .HasForeignKey("AuthorizationCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Program", "Program")
                        .WithMany("AuthorizationDetails")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AuthorizationCategory");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Core.Entities.Curriculum", b =>
                {
                    b.HasOne("Core.Entities.ExpertiseBranch", "ExpertiseBranch")
                        .WithMany("Curricula")
                        .HasForeignKey("ExpertiseBranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ExpertiseBranch");
                });

            modelBuilder.Entity("Core.Entities.CurriculumPerfection", b =>
                {
                    b.HasOne("Core.Entities.Curriculum", "Curriculum")
                        .WithMany("CurriculumPerfections")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Perfection", "Perfection")
                        .WithMany("CurriculumPerfections")
                        .HasForeignKey("PerfectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Curriculum");

                    b.Navigation("Perfection");
                });

            modelBuilder.Entity("Core.Entities.CurriculumRotation", b =>
                {
                    b.HasOne("Core.Entities.Curriculum", "Curriculum")
                        .WithMany("CurriculumRotations")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Rotation", "Rotation")
                        .WithMany("CurriculumRotations")
                        .HasForeignKey("RotationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Curriculum");

                    b.Navigation("Rotation");
                });

            modelBuilder.Entity("Core.Entities.Demand", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.DependentProgram", b =>
                {
                    b.HasOne("Core.Entities.Program", "Program")
                        .WithMany("DependentPrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.RelatedDependentProgram", "RelatedDependentProgram")
                        .WithMany("ChildPrograms")
                        .HasForeignKey("RelatedDependentProgramId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Program");

                    b.Navigation("RelatedDependentProgram");
                });

            modelBuilder.Entity("Core.Entities.EducationOfficer", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("EducationOfficers")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Program", "Program")
                        .WithMany("EducationOfficers")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Educator");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Core.Entities.EducationTracking", b =>
                {
                    b.HasOne("Core.Entities.Program", "FormerProgram")
                        .WithMany("EducationTrackingsFormer")
                        .HasForeignKey("FormerProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Educator", "ProcessOwner")
                        .WithMany("EducationTrackings")
                        .HasForeignKey("ProcessOwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Program", "Program")
                        .WithMany("EducationTrackings")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.EducationTracking", "RelatedEducationTracking")
                        .WithMany()
                        .HasForeignKey("RelatedEducationTrackingId");

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("EducationTrackings")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FormerProgram");

                    b.Navigation("ProcessOwner");

                    b.Navigation("Program");

                    b.Navigation("RelatedEducationTracking");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.Educator", b =>
                {
                    b.HasOne("Core.Entities.Title", "AcademicTitle")
                        .WithMany("AcademicEducators")
                        .HasForeignKey("AcademicTitleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Title", "StaffTitle")
                        .WithMany("StaffEducators")
                        .HasForeignKey("StaffTitleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("Educators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AcademicTitle");

                    b.Navigation("StaffTitle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.EducatorAdministrativeTitle", b =>
                {
                    b.HasOne("Core.Entities.Title", "AdministrativeTitle")
                        .WithMany("EducatorAdministrativeTitles")
                        .HasForeignKey("AdministrativeTitleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("EducatorAdministrativeTitles")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AdministrativeTitle");

                    b.Navigation("Educator");
                });

            modelBuilder.Entity("Core.Entities.EducatorDependentProgram", b =>
                {
                    b.HasOne("Core.Entities.DependentProgram", "DependentProgram")
                        .WithMany("EducatorDependentPrograms")
                        .HasForeignKey("DependentProgramId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("EducatorDependentPrograms")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DependentProgram");

                    b.Navigation("Educator");
                });

            modelBuilder.Entity("Core.Entities.EducatorExpertiseBranch", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("EducatorExpertiseBranches")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.ExpertiseBranch", "ExpertiseBranch")
                        .WithMany("EducatorExpertiseBranches")
                        .HasForeignKey("ExpertiseBranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Educator");

                    b.Navigation("ExpertiseBranch");
                });

            modelBuilder.Entity("Core.Entities.EducatorProgram", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("EducatorPrograms")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Program", "Program")
                        .WithMany("EducatorPrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Educator");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Core.Entities.EducatorStaffInstitution", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("StaffInstitutions")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.Hospital", "StaffInstitution")
                        .WithMany("EducatorStaffInstitutions")
                        .HasForeignKey("StaffInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Educator");

                    b.Navigation("StaffInstitution");
                });

            modelBuilder.Entity("Core.Entities.EducatorStaffParentInstitution", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("StaffParentInstitutions")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.University", "StaffParentInstitution")
                        .WithMany("StaffEducators")
                        .HasForeignKey("StaffParentInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Educator");

                    b.Navigation("StaffParentInstitution");
                });

            modelBuilder.Entity("Core.Entities.EthicCommitteeDecision", b =>
                {
                    b.HasOne("Core.Entities.Thesis", "Thesis")
                        .WithMany("EthicCommitteeDecisions")
                        .HasForeignKey("ThesisId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Thesis");
                });

            modelBuilder.Entity("Core.Entities.ExitExam", b =>
                {
                    b.HasOne("Core.Entities.EducationTracking", "EducationTracking")
                        .WithMany("ExitExams")
                        .HasForeignKey("EducationTrackingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Hospital", "Hospital")
                        .WithMany("ExitExams")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.User", "Secretary")
                        .WithMany("ExitExams")
                        .HasForeignKey("SecretaryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("ExitExams")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EducationTracking");

                    b.Navigation("Hospital");

                    b.Navigation("Secretary");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.ExpertiseBranch", b =>
                {
                    b.HasOne("Core.Entities.Profession", "Profession")
                        .WithMany("ExpertiseBranches")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("Core.Entities.Faculty", b =>
                {
                    b.HasOne("Core.Entities.Profession", "Profession")
                        .WithMany("Faculties")
                        .HasForeignKey("ProfessionId");

                    b.HasOne("Core.Entities.University", "University")
                        .WithMany("Faculties")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profession");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Core.Entities.GraduationDetail", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("GraduationDetails")
                        .HasForeignKey("EducatorId");

                    b.Navigation("Educator");
                });

            modelBuilder.Entity("Core.Entities.Hospital", b =>
                {
                    b.HasOne("Core.Entities.Faculty", "Faculty")
                        .WithMany("Hospitals")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Institution", "Institution")
                        .WithMany("Hospitals")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Province", "Province")
                        .WithMany("Hospitals")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Faculty");

                    b.Navigation("Institution");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Core.Entities.Jury", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("Juries")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.ExitExam", null)
                        .WithMany("Juries")
                        .HasForeignKey("ExitExamId");

                    b.HasOne("Core.Entities.ThesisDefence", "ThesisDefence")
                        .WithMany("Juries")
                        .HasForeignKey("ThesisDefenceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Educator");

                    b.Navigation("ThesisDefence");
                });

            modelBuilder.Entity("Core.Entities.Koru.Field", b =>
                {
                    b.HasOne("Core.Entities.Koru.Permission", "Permission")
                        .WithMany("Fields")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Core.Entities.Koru.Role", b =>
                {
                    b.HasOne("Core.Entities.Koru.RoleCategory", "Category")
                        .WithMany("Roles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Core.Entities.Koru.RoleField", b =>
                {
                    b.HasOne("Core.Entities.Koru.Field", "Field")
                        .WithMany("RoleFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Koru.Role", "Role")
                        .WithMany("RoleFields")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Field");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Entities.Koru.RoleMenu", b =>
                {
                    b.HasOne("Core.Entities.Menu", "Menu")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Koru.Role", "Role")
                        .WithMany("RoleMenus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Entities.Koru.RolePermission", b =>
                {
                    b.HasOne("Core.Entities.Koru.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Koru.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Entities.Koru.UserRole", b =>
                {
                    b.HasOne("Core.Entities.Koru.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Koru.UserRoleFaculty", b =>
                {
                    b.HasOne("Core.Entities.ExpertiseBranch", "ExpertiseBranch")
                        .WithMany("UserRoleFaculties")
                        .HasForeignKey("ExpertiseBranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Faculty", "Faculty")
                        .WithMany("UserRoleFaculties")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Koru.UserRole", "UserRole")
                        .WithMany("UserRoleFaculties")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ExpertiseBranch");

                    b.Navigation("Faculty");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Core.Entities.Koru.UserRoleHospital", b =>
                {
                    b.HasOne("Core.Entities.Hospital", "Hospital")
                        .WithMany("UserRoleHospitals")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Koru.UserRole", "UserRole")
                        .WithMany("UserRoleHospitals")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Hospital");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Core.Entities.Koru.UserRoleProgram", b =>
                {
                    b.HasOne("Core.Entities.Program", "Program")
                        .WithMany("UserRolePrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Koru.UserRole", "UserRole")
                        .WithMany("UserRolePrograms")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Program");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Core.Entities.Koru.UserRoleProvince", b =>
                {
                    b.HasOne("Core.Entities.Province", "Province")
                        .WithMany("UserRoleProvinces")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Koru.UserRole", "UserRole")
                        .WithMany("UserRoleProvinces")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Province");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Core.Entities.Koru.UserRoleStudent", b =>
                {
                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("UserRoleStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Koru.UserRole", "UserRole")
                        .WithMany("UserRoleStudents")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Student");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Core.Entities.Koru.UserRoleUniversity", b =>
                {
                    b.HasOne("Core.Entities.University", "University")
                        .WithMany("UserRoleUniversities")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Koru.UserRole", "UserRole")
                        .WithMany("UserRoleUniversities")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("University");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Core.Entities.Menu", b =>
                {
                    b.HasOne("Core.Entities.Menu", "ParentMenu")
                        .WithMany("ChildMenus")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("Core.Entities.OfficialLetter", b =>
                {
                    b.HasOne("Core.Entities.Thesis", "Thesis")
                        .WithMany("OfficialLetters")
                        .HasForeignKey("ThesisId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Thesis");
                });

            modelBuilder.Entity("Core.Entities.OpinionForm", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("EducatorOpinionForms")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Program", "Program")
                        .WithMany("OpinionForms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Educator", "ProgramManager")
                        .WithMany("ProgramManagerOpinionForms")
                        .HasForeignKey("ProgramManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.User", "Secretary")
                        .WithMany("OpinionForms")
                        .HasForeignKey("SecretaryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("OpinionForms")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Educator");

                    b.Navigation("Program");

                    b.Navigation("ProgramManager");

                    b.Navigation("Secretary");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.Perfection", b =>
                {
                    b.HasOne("Core.Entities.CurriculumRotation", "CurriculumRotation")
                        .WithMany("Perfections")
                        .HasForeignKey("CurriculumRotationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Rotation", null)
                        .WithMany("Perfections")
                        .HasForeignKey("RotationId");

                    b.Navigation("CurriculumRotation");
                });

            modelBuilder.Entity("Core.Entities.PerfectionProperty", b =>
                {
                    b.HasOne("Core.Entities.Perfection", "Perfection")
                        .WithMany("PerfectionProperties")
                        .HasForeignKey("PerfectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Property", "Property")
                        .WithMany("PerfectionProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Perfection");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Core.Entities.PerformanceRating", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("PerformanceRatings")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("PerformanceRatings")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Educator");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.Program", b =>
                {
                    b.HasOne("Core.Entities.ExpertiseBranch", "ExpertiseBranch")
                        .WithMany("Programs")
                        .HasForeignKey("ExpertiseBranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Faculty", "Faculty")
                        .WithMany("Programs")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Hospital", "Hospital")
                        .WithMany("Programs")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.User", "Manager")
                        .WithMany("Programs")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ExpertiseBranch");

                    b.Navigation("Faculty");

                    b.Navigation("Hospital");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Core.Entities.ProgressReport", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("ProgressReports")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Thesis", "Thesis")
                        .WithMany("ProgressReports")
                        .HasForeignKey("ThesisId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Educator");

                    b.Navigation("Thesis");
                });

            modelBuilder.Entity("Core.Entities.ProtocolProgram", b =>
                {
                    b.HasOne("Core.Entities.Program", "ParentProgram")
                        .WithMany("ParentPrograms")
                        .HasForeignKey("ParentProgramId");

                    b.Navigation("ParentProgram");
                });

            modelBuilder.Entity("Core.Entities.RelatedDependentProgram", b =>
                {
                    b.HasOne("Core.Entities.ProtocolProgram", "ProtocolProgram")
                        .WithMany("RelatedDependentPrograms")
                        .HasForeignKey("ProtocolProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProtocolProgram");
                });

            modelBuilder.Entity("Core.Entities.RelatedExpertiseBranch", b =>
                {
                    b.HasOne("Core.Entities.ExpertiseBranch", "PrincipalBranch")
                        .WithMany("SubBranches")
                        .HasForeignKey("PrincipalBranchId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Core.Entities.ExpertiseBranch", "SubBranch")
                        .WithMany("PrincipalBranches")
                        .HasForeignKey("SubBranchId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("PrincipalBranch");

                    b.Navigation("SubBranch");
                });

            modelBuilder.Entity("Core.Entities.Rotation", b =>
                {
                    b.HasOne("Core.Entities.ExpertiseBranch", "ExpertiseBranch")
                        .WithMany("Rotations")
                        .HasForeignKey("ExpertiseBranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ExpertiseBranch");
                });

            modelBuilder.Entity("Core.Entities.ScientificStudy", b =>
                {
                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("ScientificStudies")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Study", "Study")
                        .WithMany("ScientificStudies")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Student");

                    b.Navigation("Study");
                });

            modelBuilder.Entity("Core.Entities.Student", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Advisor")
                        .WithMany("Students")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Curriculum", "Curriculum")
                        .WithMany("Students")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Program", "OriginalProgram")
                        .WithMany("OriginalStudents")
                        .HasForeignKey("OriginalProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Program", "Program")
                        .WithMany("Students")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Program", "ProtocolProgram")
                        .WithMany("ProtocolStudents")
                        .HasForeignKey("ProtocolProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Advisor");

                    b.Navigation("Curriculum");

                    b.Navigation("OriginalProgram");

                    b.Navigation("Program");

                    b.Navigation("ProtocolProgram");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.StudentExpertiseBranch", b =>
                {
                    b.HasOne("Core.Entities.ExpertiseBranch", "ExpertiseBranch")
                        .WithMany("StudentExpertiseBranches")
                        .HasForeignKey("ExpertiseBranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("StudentExpertiseBranches")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ExpertiseBranch");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.StudentPerfection", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("StudentPerfections")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Perfection", "Perfection")
                        .WithMany("StudentPerfections")
                        .HasForeignKey("PerfectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Program", "Program")
                        .WithMany("StudentPerfections")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("StudentPerfections")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Educator");

                    b.Navigation("Perfection");

                    b.Navigation("Program");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.StudentRotation", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("StudentRotations")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Program", "Program")
                        .WithMany("StudentRotations")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Rotation", "Rotation")
                        .WithMany("StudentRotations")
                        .HasForeignKey("RotationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("StudentRotations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Educator");

                    b.Navigation("Program");

                    b.Navigation("Rotation");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.StudentRotationPerfection", b =>
                {
                    b.HasOne("Core.Entities.Educator", "Educator")
                        .WithMany("StudentRotationPerfections")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Perfection", "Perfection")
                        .WithMany("StudentRotationPerfections")
                        .HasForeignKey("PerfectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.StudentRotation", "StudentRotation")
                        .WithMany("StudentRotationPerfections")
                        .HasForeignKey("StudentRotationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Educator");

                    b.Navigation("Perfection");

                    b.Navigation("StudentRotation");
                });

            modelBuilder.Entity("Core.Entities.Thesis", b =>
                {
                    b.HasOne("Core.Entities.Educator", null)
                        .WithMany("Theses")
                        .HasForeignKey("EducatorId");

                    b.HasOne("Core.Entities.Student", "Student")
                        .WithMany("Theses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.ThesisDefence", b =>
                {
                    b.HasOne("Core.Entities.Hospital", "Hospital")
                        .WithMany("ThesisDefences")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Thesis", "Thesis")
                        .WithMany("ThesisDefences")
                        .HasForeignKey("ThesisId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Hospital");

                    b.Navigation("Thesis");
                });

            modelBuilder.Entity("Core.Entities.University", b =>
                {
                    b.HasOne("Core.Entities.Institution", "Institution")
                        .WithMany("Universities")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.User", "Manager")
                        .WithMany("Universities")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Province", "Province")
                        .WithMany("Universities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Institution");

                    b.Navigation("Manager");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.HasOne("Core.Entities.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Institution", "Institution")
                        .WithMany("Users")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Country");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Core.Entities.UserNotification", b =>
                {
                    b.HasOne("Core.Entities.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.AuthorizationCategory", b =>
                {
                    b.Navigation("AuthorizationDetails");
                });

            modelBuilder.Entity("Core.Entities.Country", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Entities.Curriculum", b =>
                {
                    b.Navigation("CurriculumPerfections");

                    b.Navigation("CurriculumRotations");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Core.Entities.CurriculumRotation", b =>
                {
                    b.Navigation("Perfections");
                });

            modelBuilder.Entity("Core.Entities.DependentProgram", b =>
                {
                    b.Navigation("EducatorDependentPrograms");
                });

            modelBuilder.Entity("Core.Entities.EducationTracking", b =>
                {
                    b.Navigation("ExitExams");
                });

            modelBuilder.Entity("Core.Entities.Educator", b =>
                {
                    b.Navigation("AdvisorTheses");

                    b.Navigation("EducationOfficers");

                    b.Navigation("EducationTrackings");

                    b.Navigation("EducatorAdministrativeTitles");

                    b.Navigation("EducatorDependentPrograms");

                    b.Navigation("EducatorExpertiseBranches");

                    b.Navigation("EducatorOpinionForms");

                    b.Navigation("EducatorPrograms");

                    b.Navigation("GraduationDetails");

                    b.Navigation("Juries");

                    b.Navigation("PerformanceRatings");

                    b.Navigation("ProgramManagerOpinionForms");

                    b.Navigation("ProgressReports");

                    b.Navigation("StaffInstitutions");

                    b.Navigation("StaffParentInstitutions");

                    b.Navigation("StudentPerfections");

                    b.Navigation("StudentRotationPerfections");

                    b.Navigation("StudentRotations");

                    b.Navigation("Students");

                    b.Navigation("Theses");
                });

            modelBuilder.Entity("Core.Entities.ExitExam", b =>
                {
                    b.Navigation("Juries");
                });

            modelBuilder.Entity("Core.Entities.ExpertiseBranch", b =>
                {
                    b.Navigation("Curricula");

                    b.Navigation("EducatorExpertiseBranches");

                    b.Navigation("PrincipalBranches");

                    b.Navigation("Programs");

                    b.Navigation("Rotations");

                    b.Navigation("StudentExpertiseBranches");

                    b.Navigation("SubBranches");

                    b.Navigation("UserRoleFaculties");
                });

            modelBuilder.Entity("Core.Entities.Faculty", b =>
                {
                    b.Navigation("Affiliations");

                    b.Navigation("Hospitals");

                    b.Navigation("Programs");

                    b.Navigation("UserRoleFaculties");
                });

            modelBuilder.Entity("Core.Entities.Hospital", b =>
                {
                    b.Navigation("Affiliations");

                    b.Navigation("EducatorStaffInstitutions");

                    b.Navigation("ExitExams");

                    b.Navigation("Programs");

                    b.Navigation("ThesisDefences");

                    b.Navigation("UserRoleHospitals");
                });

            modelBuilder.Entity("Core.Entities.Institution", b =>
                {
                    b.Navigation("Hospitals");

                    b.Navigation("Universities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Entities.Koru.Field", b =>
                {
                    b.Navigation("RoleFields");
                });

            modelBuilder.Entity("Core.Entities.Koru.Permission", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Core.Entities.Koru.Role", b =>
                {
                    b.Navigation("RoleFields");

                    b.Navigation("RoleMenus");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.Koru.RoleCategory", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Core.Entities.Koru.UserRole", b =>
                {
                    b.Navigation("UserRoleFaculties");

                    b.Navigation("UserRoleHospitals");

                    b.Navigation("UserRolePrograms");

                    b.Navigation("UserRoleProvinces");

                    b.Navigation("UserRoleStudents");

                    b.Navigation("UserRoleUniversities");
                });

            modelBuilder.Entity("Core.Entities.Menu", b =>
                {
                    b.Navigation("ChildMenus");

                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("Core.Entities.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("Core.Entities.Perfection", b =>
                {
                    b.Navigation("CurriculumPerfections");

                    b.Navigation("PerfectionProperties");

                    b.Navigation("StudentPerfections");

                    b.Navigation("StudentRotationPerfections");
                });

            modelBuilder.Entity("Core.Entities.Profession", b =>
                {
                    b.Navigation("ExpertiseBranches");

                    b.Navigation("Faculties");
                });

            modelBuilder.Entity("Core.Entities.Program", b =>
                {
                    b.Navigation("AuthorizationDetails");

                    b.Navigation("DependentPrograms");

                    b.Navigation("EducationOfficers");

                    b.Navigation("EducationTrackings");

                    b.Navigation("EducationTrackingsFormer");

                    b.Navigation("EducatorPrograms");

                    b.Navigation("OpinionForms");

                    b.Navigation("OriginalStudents");

                    b.Navigation("ParentPrograms");

                    b.Navigation("ProtocolStudents");

                    b.Navigation("StudentPerfections");

                    b.Navigation("StudentRotations");

                    b.Navigation("Students");

                    b.Navigation("UserRolePrograms");
                });

            modelBuilder.Entity("Core.Entities.Property", b =>
                {
                    b.Navigation("PerfectionProperties");
                });

            modelBuilder.Entity("Core.Entities.ProtocolProgram", b =>
                {
                    b.Navigation("RelatedDependentPrograms");
                });

            modelBuilder.Entity("Core.Entities.Province", b =>
                {
                    b.Navigation("Hospitals");

                    b.Navigation("Universities");

                    b.Navigation("UserRoleProvinces");
                });

            modelBuilder.Entity("Core.Entities.RelatedDependentProgram", b =>
                {
                    b.Navigation("ChildPrograms");
                });

            modelBuilder.Entity("Core.Entities.Rotation", b =>
                {
                    b.Navigation("CurriculumRotations");

                    b.Navigation("Perfections");

                    b.Navigation("StudentRotations");
                });

            modelBuilder.Entity("Core.Entities.Student", b =>
                {
                    b.Navigation("EducationTrackings");

                    b.Navigation("ExitExams");

                    b.Navigation("OpinionForms");

                    b.Navigation("PerformanceRatings");

                    b.Navigation("ScientificStudies");

                    b.Navigation("StudentExpertiseBranches");

                    b.Navigation("StudentPerfections");

                    b.Navigation("StudentRotations");

                    b.Navigation("Theses");

                    b.Navigation("UserRoleStudents");
                });

            modelBuilder.Entity("Core.Entities.StudentRotation", b =>
                {
                    b.Navigation("StudentRotationPerfections");
                });

            modelBuilder.Entity("Core.Entities.Study", b =>
                {
                    b.Navigation("ScientificStudies");
                });

            modelBuilder.Entity("Core.Entities.Thesis", b =>
                {
                    b.Navigation("AdvisorTheses");

                    b.Navigation("EthicCommitteeDecisions");

                    b.Navigation("OfficialLetters");

                    b.Navigation("ProgressReports");

                    b.Navigation("ThesisDefences");
                });

            modelBuilder.Entity("Core.Entities.ThesisDefence", b =>
                {
                    b.Navigation("Juries");
                });

            modelBuilder.Entity("Core.Entities.Title", b =>
                {
                    b.Navigation("AcademicEducators");

                    b.Navigation("EducatorAdministrativeTitles");

                    b.Navigation("StaffEducators");
                });

            modelBuilder.Entity("Core.Entities.University", b =>
                {
                    b.Navigation("Affiliations");

                    b.Navigation("Faculties");

                    b.Navigation("StaffEducators");

                    b.Navigation("UserRoleUniversities");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("Educators");

                    b.Navigation("ExitExams");

                    b.Navigation("OpinionForms");

                    b.Navigation("Programs");

                    b.Navigation("Students");

                    b.Navigation("Universities");

                    b.Navigation("UserNotifications");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
