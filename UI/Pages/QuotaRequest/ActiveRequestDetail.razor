@using Radzen
@using Radzen.Blazor
@using Shared.Types
@using UI.SharedComponents.Components
@using Shared.Extensions
@using Shared.ResponseModels
@using Shared.ResponseModels.Program
@page "/quota-request/active-request/{Id:long?}"
@inherits FluxorComponent

<AppContent IsFluid="false" BreadCrumbLinks="_links">
    <Toolbar>
        <div class="d-flex">
            <PermissionWrapper Permissions="new List<PermissionEnum>(){PermissionEnum.QuotaRequestUpdate}">
                <SpinnerButton Spinning="_saving" Disabled="_saving" OnClick="() => Save()">
                    <i class="fas fa-save"></i>@L["Save"]
                </SpinnerButton>
            </PermissionWrapper>
        </div>
    </Toolbar>
    <Content>
        <div class="card card-custom">
            <div class="card-body">
                @if (_loaded)
                {
                    if (!_notFound)
                    {
                        <PermissionWrapper Permissions="new List<PermissionEnum>(){PermissionEnum.QuotaRequestUpdate}">

                            <div class="row">
                                <div class="col-12 col-lg-6">
                                    <div class="form-group">
                                        <label>@L["Year"]</label>
                                        <InputNumber class="form-control" @bind-Value="_quotaRequest.Year" disabled/>
                                    </div>
                                    <div class="form-group">
                                        <label>@L["Period"]</label>
                                        <InputSelect @bind-Value="_quotaRequest.Period" class="form-control" disabled>
                                            <option value="" selected>@L["Select"]</option>
                                            @foreach (YearPeriodType yearPeriodType in Enum.GetValues(typeof(YearPeriodType)))
                                            {
                                                <option value="@yearPeriodType">@L[yearPeriodType.GetDescription()] </option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="col-12 col-lg-6">
                                    <div class="form-group">
                                        <label>@L["Type"]</label>
                                        <InputSelect @bind-Value="_quotaRequest.Type" class="form-control" disabled>
                                            <option value="" selected>@L["Select"]</option>
                                            @foreach (PlacementExamType placementExamType in Enum.GetValues(typeof(PlacementExamType)))
                                            {
                                                <option value="@placementExamType">@L[placementExamType.GetDescription()] </option>
                                            }
                                        </InputSelect>
                                    </div>
                                    <div class="form-group">
                                        <label>@L["Deadline for Institutions to Submit Requests"]</label>
                                        <InputDate class="form-control" @bind-Value="_quotaRequest.ApplicationEndDate" TValue="DateTime?" disabled />
                                    </div>
                                </div>
                            </div>
                        </PermissionWrapper>
                        @if (_programs != null)
                        {
                            <Grid Items="_programs" class="table table-hover table-bordered " RowClass='(row, index) =>""'>
                                <GridColumn Sort="ProgramName" TRowData="ProgramPaginateForQuotaResponseDTO" Expression="c => c.ProgramName" Title="@L["Program"]">
                                    <FilterTemplate Context="filter">
                                        <div class="form-group mb-0">
                                            <div class="input-icon input-icon-right">
                                                <input type="text" class="form-control" name="@filter" @onchange='(args) => OnChangeFilter(args, filter)' autocomplete="false">
                                                @if (IsFiltered(filter))
                                                {
                                                    <span class="cursor-pointer" @onclick='() => OnResetFilter(filter)'>
                                                        <i class="flaticon2-cross icon- text-danger"></i>
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="cursor-pointer">
                                                        <i class="flaticon2-search-1 icon-md"></i>
                                                    </span>
                                                }
                                            </div>
                                        </div>
                                    </FilterTemplate>
                                </GridColumn>
                                <GridColumn TRowData="ProgramPaginateForQuotaResponseDTO" Title="@L["Total Educator Count"]">
                                    <ChildContent>
                                        @(context.TotalEducatorCount + (_quotaRequest?.SubQuotaRequests?.FirstOrDefault(x => x.ProgramId == context.Id)?.SpecialistDoctorCount ?? 0))
                                    </ChildContent>
                                </GridColumn>
                                <GridColumn TRowData="ProgramPaginateForQuotaResponseDTO" Expression="c => c.CurrentStudentCount" Title="@L["Total Student Count"]">
                                </GridColumn>
                                <GridColumn TRowData="ProgramPaginateForQuotaResponseDTO" Expression="c => c.AuthorizationCategory" Title="@L["Authorization Category"]">
                                </GridColumn>
                                <GridColumn class="min-w-150px align-middle" TRowData="ProgramPaginateForQuotaResponseDTO" Title="@L["Transactions"]">
                                    @if (!_quotaRequest.SubQuotaRequests.Any(x => x.ProgramId == context.Id))
                                    {
                                        <PermissionWrapper Permissions="new List<PermissionEnum>(){PermissionEnum.SubQuotaRequestAdd}">
                                            <button @onclick="() => OpenSubQuotaRequestModal(context)" class="btn btn-icon btn-light-primary btn-sm"><i class="fas fa-plus"></i></button>
                                        </PermissionWrapper>
                                    }
                                    else
                                    {
                                        <PermissionWrapper Permissions="new List<PermissionEnum>(){PermissionEnum.SubQuotaRequestGetById}">
                                            <button @onclick="() => OpenSubQuotaRequestModal(context)" class="btn btn-icon btn-light-success btn-sm"><i class="far fa-edit"></i></button>
                                        </PermissionWrapper>
                                    }
                                </GridColumn>
                            </Grid>
                            <Pagination Action="PaginationHandler" Count="_paginationModel.TotalItemCount" Page="_paginationModel.Page"
                                        DefaultPageSize="10" Loading="!_loaded">
                            </Pagination>
                        }


                    }
                    else
                    {
                        <_404Page ErrorText="No Records Found" ButtonText="Return Back" ReturnLink="/management/quotaRequests"></_404Page>
                    }
                }
                else
                {
                    <Spinner></Spinner>
                }
            </div>
        </div>
    </Content>
</AppContent>
<MyModal @ref="_subQuotaRequestModal" Size="MyModal.ModalSize.Large" ShowFooter="false" ShowHeader="false">
    <Body>
        <EditForm EditContext="@_ecSubQuotaRequest">
            <FluentValidator TValidator="SubQuotaRequestValidator"></FluentValidator>
            <h2>@L["Educator Count Information"] </h2>
            <div class="row">
                <div class="col-12 col-md-6">
                    <div class="form-group">
                        <label>@L["Professor or Education Person Count"] </label>
                        <InputNumber class="form-control" @bind-Value="_subQuotaRequest.ProfessorCount" disabled />
                        <label>@L["Associate Professor Count"] </label>
                        <InputNumber class="form-control" @bind-Value="_subQuotaRequest.AssociateProfessorCount" disabled />
                        <label>@L["Chief Assistant Count"] </label>
                        <InputNumber class="form-control" @bind-Value="_subQuotaRequest.ChiefAssistantCount" disabled />
                    </div>
                </div>
                <div class="col-12 col-md-6">
                    <div class="form-group">

                        <label>@L["Doctor Lecturer Count"] </label>
                        <InputNumber class="form-control" @bind-Value="_subQuotaRequest.DoctorLecturerCount" disabled />
                        <label>@L["Total Educator Count"] </label>
                        <InputNumber class="form-control" @bind-Value="_subQuotaRequest.TotalEducatorCount" disabled />
                        <label>@L["Specialist Doctor Count"] </label>
                        <InputNumber class="form-control" @bind-Value="_subQuotaRequest.SpecialistDoctorCount" />
                        <ValidationMessage For="() => _subQuotaRequest.SpecialistDoctorCount"></ValidationMessage>
                    </div>
                </div>
            </div>
            <h2>@L["Student Count Information"] </h2>
            <div class="row">
                <div class="col-12">
                    <div class="form-group">
                        <label>@L["Total Student Count"] </label>
                        <InputNumber class="form-control" @bind-Value="_subQuotaRequest.CurrentStudentCount" disabled />
                        <label>@L["Number of students with 6 months left until the end of their education time"] </label>
                        <InputNumber class="form-control" @bind-Value="_subQuotaRequest.StudentWhoLast6MonthToFinishCount" disabled />
                    </div>
                </div>
            </div>
            <h2>@L["Student Request"] </h2>
            <div class="row">
                <div class="col-12">
                    <div class="form-group">
                        <Grid Items="_subQuotaRequest.StudentCounts" class="table table-hover table-bordered " RowClass='(row, index) =>""'>
                            <GridColumn TRowData="StudentCountResponseDTO" Title="@L["Type"]">
                                <ChildContent Context="sc">
                                    <InputSelect @bind-Value="@sc.QuotaType" class="form-control">
                                        <option value="" selected>@L["Select"]</option>
                                        @foreach (QuotaType quotaType in _quotaTypes)
                                        {
                                            <option value="@quotaType">@L[quotaType.GetDescription()] </option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="() => sc.QuotaType"></ValidationMessage>
                                </ChildContent>
                            </GridColumn>
                            <GridColumn TRowData="StudentCountResponseDTO" Title="@L["Miktar"]">
                                <ChildContent Context="sc">
                                    <InputNumber class="form-control" @bind-Value="sc.RequestedCount" />
                                    <ValidationMessage For="() => sc.RequestedCount"></ValidationMessage>
                                </ChildContent>
                            </GridColumn>
                            <GridColumn TRowData="StudentCountResponseDTO" Title="@L["Transactions"]">
                                <ChildContent Context="sc">
                                    <button class="btn btn-icon btn-sm btn-light-danger" @onclick="() => { _subQuotaRequest.StudentCounts.Remove(sc); StateHasChanged(); }">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </ChildContent>
                            </GridColumn>
                        </Grid>
                        <ValidationMessage For="() => _subQuotaRequest.StudentCounts"></ValidationMessage>

                        <div class="form-group mt-2">
                            <button class="btn btn-light-success form-control" @onclick="OnAddStudentCount">
                                <i class="fas fa-plus"></i>Yeni Kontenjan
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            @if (_subQuotaRequest.SubQuotaRequestPortfolios?.Count > 0)
            {
                <h2>@L["Porfolio Information"] </h2>
                <div class="row">
                    <div class="col-12">
                        <div class="form-group">
                            @foreach (var item in _subQuotaRequest.SubQuotaRequestPortfolios)
                            {
                                <label>@L[item.Portfolio.Name] </label>
                                <InputNumber class="form-control" @bind-Value="item.Answer" />
                                <ValidationMessage For="() => item.Answer"></ValidationMessage>
                            }
                        </div>
                    </div>
                </div>
            }
        </EditForm>
        @if (_subQuotaRequest.Id > 0)
        {
            <PermissionWrapper Permissions="new List<PermissionEnum>(){PermissionEnum.SubQuotaRequestUpdate}">
                <SpinnerButton OnClick="async () => await UpdateSubQuotaRequest()" ButtonClass="btn btn-clean btn-primary" Spinning="_saving" Disabled="_saving">
                    @L["Save"]
                </SpinnerButton>
            </PermissionWrapper>
        }
        else
        {
            <PermissionWrapper Permissions="new List<PermissionEnum>(){PermissionEnum.SubQuotaRequestAdd}">
                <SpinnerButton OnClick="async () => await AddSubQuotaRequest()" ButtonClass="btn btn-clean btn-primary" Spinning="_saving" Disabled="_saving">
                    @L["Save"]
                </SpinnerButton>
            </PermissionWrapper>
        }

    </Body>
</MyModal>