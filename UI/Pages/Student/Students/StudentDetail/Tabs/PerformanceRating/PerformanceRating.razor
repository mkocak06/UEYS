@using Shared.Extensions;
@using UI.SharedComponents.Components
@using Shared.ResponseModels
@inherits FluxorComponent

<div class="card-toolbar position-absolute top-0 right-0 mt-6 mr-10">
    <div class="d-flex self-align-end">
        @if (_isAdding)
        {
            <button @onclick="async ()=> await performanceRatingForAdd.Save()" class="btn btn-outline-primary">@L["Save"]</button>
           
            <button @onclick="@(()=>{_isAdding=false;})" class="btn btn-outline-primary ml-2">@L["Cancel"]</button>
        }
        else
        {
            @if (_isEditing)
            {
                <button @onclick="async ()=> await performanceRatingForUpdate.Save()" class="btn btn-outline-primary">@L["Update"]</button>
               
                <button @onclick="@(()=>{_isEditing=false;})" class="btn btn-outline-primary ml-2">@L["Cancel"]</button>

            }
            else
            {

                <button @onclick="(()=>{_isAdding=true;})" class="btn btn-outline-primary">@L["add_new", L["Assessment"]]</button>
            }

        }

    </div>
</div>

@if (_isAdding)
{

    <PerformanceRatingDetail @ref="performanceRatingForAdd" OnSaveHandler="OnSavePerformanceRating" IsEditing="false"></PerformanceRatingDetail>
}
else
{

    @if (_pRatings != null)
    {
        if (_isEditing)
        {
            <PerformanceRatingDetail @ref="performanceRatingForUpdate" OnUpdateHandler="OnUpdatePerformanceRating" IsEditing="true" PerformanceRating="_performanceRating"></PerformanceRatingDetail>

        }
        else
        {
            <div class="card card-custom">

                <div class="card-body">
                    <Grid IsFilter="false" Items="_pRatings" OnSortChanged="async sort => await OnSortChange(sort)"
              Sort="_filter.Sort.FirstOrDefault()" class="table table-hover table-bordered " RowClass='(row, index) => GetAverageClass(row.OverallAverage)'>
                        <GridColumn Sort="Educator.User.Name" TRowData="PerformanceRatingResponseDTO" Title="@L["Evaluator"]">
                            <ChildContent>
                                @context.Educator?.User?.Name
                            </ChildContent>
                        </GridColumn>
                        <GridColumn Sort="CreateDate" TRowData="PerformanceRatingResponseDTO" Title="@L["Rating Date"]">
                            <ChildContent>
                                @context.CreateDate?.ToString("dd.MM.yyyy")
                            </ChildContent>
                        </GridColumn>
                        <GridColumn Sort="Result" TRowData="PerformanceRatingResponseDTO" Title="@L["Status"]">
                            <ChildContent>
                                @context.Result?.GetDescription()
                            </ChildContent>
                        </GridColumn>
                        <GridColumn class="min-w-100px align-middle" TRowData="PerformanceRatingResponseDTO" Title="@L["Transactions"]">
                            <a @onclick="() => OnDetailHandler(context)" class="btn btn-light-success btn-icon btn-sm"><i title=@L["Edit"] class="fas fa-edit"></i></a>
                            <a @onclick="async () => await OnDeleteHandler(context)" class="btn btn-light-danger btn-icon btn-sm"><i title=@L["Pasife Al"] class="fas fa-trash-alt"></i></a>
                        </GridColumn>
                    </Grid>
                    <Pagination Action="PaginationHandler" Count="_paginationModel.TotalItemCount" Page="_paginationModel.Page"
                    DefaultPageSize="10" Loading="_loading">
                    </Pagination>
                </div>
            </div>
        }
    }
    else
    {
        <Spinner></Spinner>
    }
}
