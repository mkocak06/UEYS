@using Shared.Types
@using UI.SharedComponents.Components
@using Shared.ResponseModels
@inherits FluxorComponent


<div class="card-toolbar position-absolute top-0 right-0 mt-1 mr-20">
    <div class="d-flex self-align-end">
        <div class="text-center mt-5">
            <PermissionWrapper Permissions="new List<PermissionEnum>(){PermissionEnum.StudentsSpecificEducationAdd}">
                <button @onclick=OpenModalForAdd class="btn btn-outline-primary">@L["add_new", L["Specific Education"]]</button>
            </PermissionWrapper>
        </div>
    </div>
</div>
<div class="card card-custom">
    <div class="card-body">
        @if (_studentSpecificEducations != null)
        {
            <Grid Items="_studentSpecificEducations" class="table table-hover table-bordered " Sort="_filter.Sort.FirstOrDefault()" OnSortChanged="sort => OnSortChange(sort)" RowClass='(row, index) => ""'>
                <GridColumn Sort="SpecificEducation.Name" TRowData="StudentSpecificEducationResponseDTO" Title="@L["_name", L["Specific Education"]]">
                    <ChildContent>
                        @(context.SpecificEducation?.Name ?? "-")
                    </ChildContent>
                    <FilterTemplate Context="filter">
                        <div class="form-group mb-0">
                            <div class="input-icon input-icon-right">
                                <input type="text" class="form-control" name="@filter" @onchange='(args) => OnChangeFilter(args, filter)' autocomplete="false">
                                @if (IsFiltered(filter))
                                {
                                    <span class="cursor-pointer" @onclick='() => OnResetFilter(filter)'>
                                        <i class="flaticon2-cross icon- text-danger"></i>
                                    </span>
                                }
                                else
                                {
                                    <span class="cursor-pointer">
                                        <i class="flaticon2-search-1 icon-md"></i>
                                    </span>
                                }
                            </div>
                        </div>
                    </FilterTemplate>
                </GridColumn>
                <GridColumn Sort="SpecificEducationPlace.Name" TRowData="StudentSpecificEducationResponseDTO" Title="@L["_name", L["Specific Education Place"]]">
                    <ChildContent>
                        @(context.SpecificEducationPlace?.Name ?? "-")
                    </ChildContent>
                    <FilterTemplate Context="filter">
                        <div class="form-group mb-0">
                            <div class="input-icon input-icon-right">
                                <input type="text" class="form-control" name="@filter" @onchange='(args) => OnChangeFilter(args, filter)' autocomplete="false">
                                @if (IsFiltered(filter))
                                {
                                    <span class="cursor-pointer" @onclick='() => OnResetFilter(filter)'>
                                        <i class="flaticon2-cross icon- text-danger"></i>
                                    </span>
                                }
                                else
                                {
                                    <span class="cursor-pointer">
                                        <i class="flaticon2-search-1 icon-md"></i>
                                    </span>
                                }
                            </div>
                        </div>
                    </FilterTemplate>
                </GridColumn>
                <GridColumn TRowData="StudentSpecificEducationResponseDTO" Title="@L["Create Date"]">
                    <ChildContent>
                        @(context.CreateDate?.ToShortDateString() ?? "-")
                    </ChildContent>
                </GridColumn>
                <GridColumn TRowData="StudentSpecificEducationResponseDTO" Title="@L["Start Date"]">
                    <ChildContent>
                        @(context.StartDate?.ToShortDateString() ?? "-")
                    </ChildContent>
                </GridColumn>
                <GridColumn TRowData="StudentSpecificEducationResponseDTO" Title="@L["End Date"]">
                    <ChildContent>
                        @(context.EndDate?.ToShortDateString() ?? "-")
                    </ChildContent>
                </GridColumn>
                <GridColumn class="max-w-50px align-middle" TRowData="StudentSpecificEducationResponseDTO" Title="@L["Transactions"]">
                    <PermissionWrapper Permissions="new List<PermissionEnum>(){PermissionEnum.StudentsSpecificEducationUpdate}">
                        <a @onclick="() => OpenModalForEdit(context)" class="btn btn-light-success btn-icon btn-sm"><i class="fas fa-edit"></i></a>
                    </PermissionWrapper>
                    <PermissionWrapper Permissions="new List<PermissionEnum>(){PermissionEnum.StudentsSpecificEducationDelete}">
                        <a @onclick="() => DeleteStudentSpecificEducation(context)" class="btn btn-light-danger btn-icon btn-sm"><i class="fas fa-trash-alt"></i></a>
                    </PermissionWrapper>
                </GridColumn>
            </Grid>
            <Pagination Action="PaginationHandler" Count="_paginationModel.TotalItemCount" Page="_paginationModel.Page"
                        DefaultPageSize="10" Loading="_loading">
            </Pagination>
        }
        else
        {
            <Spinner></Spinner>
        }
    </div>
</div>

<MyModal @ref="_studentSpecificEducationModal" ShowFooter="false" ShowHeader="false" Size="MyModal.ModalSize.Normal" Scrollable=true>
    <Body>
        <EditForm EditContext="_studentSpecificEducationEc">
            <FluentValidator TValidator="StudentSpecificEducationValidator" />
            <div class="row">
                <div class="col-12 col-lg-12">
                    <div class="form-group">
                        <label>@L["Specific Education"]</label>
                        <BlazoredTypeahead SearchMethod="SearchSpecificEducations"
                                           TItem="SpecificEducationResponseDTO"
                                           TValue="SpecificEducationResponseDTO"
                                           Value="_studentSpecificEducation.SpecificEducation"
                                           ValueExpression="() => _studentSpecificEducation.SpecificEducation"
                                           ValueChanged="OnChangeSpecificEducation"
                                           EnableDropDown="true"
                                           MinimumLength="1">
                            <SelectedTemplate Context="ins">
                                @ins.Name
                            </SelectedTemplate>
                            <HelpTemplate>
                                @L["Please enter at least 1 character to search."]
                            </HelpTemplate>
                            <NotFoundTemplate Context="searchText">
                                "@searchText" @L["Could not find an item named"]
                            </NotFoundTemplate>
                            <ResultTemplate Context="ins">
                                @ins.Name
                            </ResultTemplate>
                        </BlazoredTypeahead>
                        <ValidationMessage For="() => _studentSpecificEducation.SpesificEducationId" />
                    </div>
                    <div class="form-group">
                        <label>@L["Specific Education Place"]</label>
                        <BlazoredTypeahead SearchMethod="SearchSpecificEducationPlaces"
                                           TItem="SpecificEducationPlaceResponseDTO"
                                           TValue="SpecificEducationPlaceResponseDTO"
                                           Value="_studentSpecificEducation.SpecificEducationPlace"
                                           ValueExpression="() => _studentSpecificEducation.SpecificEducationPlace"
                                           ValueChanged="OnChangeSpecificEducationPlace"
                                           EnableDropDown="true"
                                           MinimumLength="1">
                            <SelectedTemplate Context="ins">
                                @ins.Name
                            </SelectedTemplate>
                            <HelpTemplate>
                                @L["Please enter at least 1 character to search."]
                            </HelpTemplate>
                            <NotFoundTemplate Context="searchText">
                                "@searchText" @L["Could not find an item named"]
                            </NotFoundTemplate>
                            <ResultTemplate Context="ins">
                                @ins.Name
                            </ResultTemplate>
                        </BlazoredTypeahead>
                        <ValidationMessage For="() => _studentSpecificEducation.SpecificEducationPlaceId" />
                    </div>
                    <div class="form-group">
                        <label>@L["Start Date"]</label>
                        <InputDate @bind-Value="_studentSpecificEducation.StartDate" class="form-control" TValue="DateTime?"></InputDate>
                    </div>
                    <div class="form-group">
                        <label>@L["End Date"]</label>
                        <InputDate @bind-Value="_studentSpecificEducation.EndDate" class="form-control" TValue="DateTime?"></InputDate>
                    </div>
                    <div class="form-group">
                        <Dropzone @ref="dropzone" EntityId="@(_studentSpecificEducation?.Id>0?_studentSpecificEducation.Id:0)" DocumentType="@Shared.Types.DocumentTypes.SpecificEducation" />
                        <ValidationMessage For="() => _studentSpecificEducation.Documents" />
                    </div>

                    @if (_studentSpecificEducation?.Documents?.Count > 0)
                    {
                        <div class="form-group">
                            <FileItem Documents="_studentSpecificEducation.Documents" Loaded="true" IsEditing="true"></FileItem>
                        </div>
                    }
                </div>
            </div>
            <button @onclick="SaveStudentSpecificEducation" class="btn btn-clean btn-primary"> @L["Save"]</button>
        </EditForm>
    </Body>
</MyModal>