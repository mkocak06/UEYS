@using Shared.ResponseModels
@using Shared.Types
<MyModal @ref="_educatorViewerModal" ShowFooter="false" ShowHeader="false">
    <Body>
        <div>
            <ul class="nav nav-pills" id="myTab1" role="tablist">
                <li class="nav-item">
                    <PermissionWrapper Permissions="new List<PermissionEnum>(){PermissionEnum.EducatorUpdate}">
                    <a class="nav-link active" id="home-tab-1" data-toggle="tab" href="#home-1">
                        <span class="nav-icon">
                            <i class="flaticon2-chat-1"></i>
                        </span>
                            <span @onclick="()=>GoToPage()" class="nav-text">@L["Educator Info"]</span>
                    </a>
                        </PermissionWrapper>
                </li>
            </ul>
            @if (Educator is not null)
            {
                <div class="tab-content mt-5" id="myTabContent1">
                    <div class="tab-pane fade show active" id="home-1" role="tabpanel" aria-labelledby="home-tab-1">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th class="p-0 w-250px"></th>
                                    <th class="p-0"></th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td class="font-weight-bolder">@L["Academic Title"]</td>
                                    <td>@(Educator.AcademicTitle ?? "-")</td>
                                </tr>
                                <tr>
                                    <td class="font-weight-bolder">@L["Staff Title"]</td>
                                    <td>@(Educator.StaffTitle ?? "-")</td>
                                </tr>
                                <tr>
                                    <td class="font-weight-bolder">@L["Name Surname"]</td>
                                    <td>@(Educator.Name ?? "-")</td>
                                </tr>
                                <tr>
                                    <td class="font-weight-bolder">@L["Phone"]</td>
                                    <td>@(Educator.Phone ?? "-")</td>
                                </tr>
                                <tr>
                                    <td class="font-weight-bolder">@L["Email"]</td>
                                    <td>@(Educator.Email ?? "-")</td>
                                </tr>
                                @* <tr>
                            <td class="font-weight-bolder">@L["Principal Branches"]</td>
                            @if (Educator.EducatorPrograms?.FirstOrDefault(x => x.ProgramId == Id).Program?.ExpertiseBranch?.PrincipalBranch?.Name != null)
                            {
                            <td>@(Educator.EducatorPrograms?.FirstOrDefault(x => x.ProgramId == Id).Program?.ExpertiseBranch?.PrincipalBranch?.Name)</td>
                            }
                            else
                            {
                            <ul><b>-</b></ul>
                            }
                            </tr>
                            <tr>
                            <td class="font-weight-bolder">@L["Principal Branch Registration Date"]</td>
                            <td>"@(Educator.Program.ExpertiseBranch?.PrincipalBranch)</td>
                            </tr>
                            <tr>
                            <td class="font-weight-bolder">@L["Sub Branch Registration Date"]</td>

                            </tr>
                            <tr>
                            <td class="font-weight-bolder">@L["Sub Branches"]</td>
                            <td>
                            @if (Educator.EducatorPrograms?.FirstOrDefault(X => X.ProgramId == Id).Program?.ExpertiseBranch?.SubBranches != null)
                            {
                            @foreach (var item in Educator.EducatorPrograms?.FirstOrDefault(X => X.ProgramId == Id).Program?.ExpertiseBranch?.SubBranches)
                            {
                            @if (item.SubBranches != null)
                            {
                            <ul><li><b>@item.Name</b></li></ul>
                            }
                            else
                            {
                            <ul><li><b>-</b></li></ul>
                            }
                            }
                            }
                            else
                            {
                            <ul><li><b>-</b></li></ul>
                            }
                            </td>
                            </tr>
                            *@

                            </tbody>
                        </table>
                    </div>
                </div>
            }
            else
            {
                @L["No data to display"]
            }
        </div>
    </Body>
</MyModal>

@code {
    [Parameter]
    public EducatorPaginateResponseDTO Educator { get; set; }
    [Parameter]
    public ProgramResponseDTO Program { get; set; }
    private MyModal _educatorViewerModal;
    [Parameter]
    public long Id { get; set; }
    [Inject]
    NavigationManager NavigationManager { get; set; }

    public void OpenModal()
    {
        Console.WriteLine(Id);
        _educatorViewerModal.OpenModal();
    }

    public void CloseModal()
    {
        _educatorViewerModal.CloseModal();
    }
    public void GoToPage()
    {
        CloseModal();
        NavigationManager.NavigateTo($"/educator/educators/{Educator.Id}");
    }
}