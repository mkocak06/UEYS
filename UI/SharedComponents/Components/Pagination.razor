@inject IDispatcher _dispatcher
@inherits FluxorComponent
<!--begin::Pagination-->
<div class="d-flex justify-content-between align-items-center flex-wrap toggle-on-item">
    <div class="d-flex flex-wrap py-2 mr-3">
        <a href="#" @onclick="() => GoTo(0)" @onclick:preventDefault class="btn btn-icon btn-sm btn-light-primary mr-2 my-1 @(IsFirstPage() ? "disabled" : "")"><i class="ki ki-bold-double-arrow-back icon-xs"></i></a>
        <a href="#" @onclick="() => GoTo(Page - 1)" @onclick:preventDefault class="btn btn-icon btn-sm btn-light-primary mr-2 my-1 @(IsFirstPage() ? "disabled" : "")"><i class="ki ki-bold-arrow-back icon-xs"></i></a>
        @if (Page > 1)
        {
            if (Page > 4)
            {
                <a href="#" @onclick:preventDefault class="btn btn-icon btn-sm disabled border-0 btn-light mr-2 my-1">...</a>
            }
            var i = 1;
            while (i < Page)
            {
                var page = i;
                @if (Page - i <= 3)
                {
                    <a href="#" @onclick="() => GoTo(page)" @onclick:preventDefault class="btn btn-icon btn-sm btn-light mr-2 my-1">@i</a>
                }
                i++;
            }
        }
        <a href="#" @onclick:preventDefault class="btn btn-icon btn-sm border-0 btn-light btn-hover-primary active mr-2 my-1">@Page</a>
        @if (Page < (long) Math.Ceiling((double) Count / _pageSize))
        {
            var i = Page;
            while (i < (long) Math.Ceiling((double) Count / _pageSize))
            {
                var page2 = i + 1;
                @if (i - Page < 10)
                {
                    <a href="#" @onclick="() => GoTo(page2)" @onclick:preventDefault class="btn btn-icon btn-sm btn-light mr-2 my-1">@(i + 1)</a>
                }
                i++;
            }
            if (Page + 10 < (long) Math.Ceiling((double) Count / _pageSize))
            {
                <a href="#" @onclick:preventDefault class="btn btn-icon btn-sm disabled border-0 btn-light mr-2 my-1">...</a>
            }
        }
        <a href="#" @onclick="() => GoTo(Page + 1)" @onclick:preventDefault class="btn btn-icon btn-sm btn-light-primary mr-2 my-1 @(IsLastPage() ? "disabled" : "")"><i class="ki ki-bold-arrow-next icon-xs"></i></a>
        <a href="#" @onclick="() => GoTo((int) Math.Ceiling((double) Count / _pageSize))" @onclick:preventDefault class="btn btn-icon btn-sm btn-light-primary mr-2 my-1 @(IsLastPage() ? "disabled" : "")"><i class="ki ki-bold-double-arrow-next icon-xs"></i></a>

    </div>
    @if (ShowDisplayInfo)
    {
        <div class="d-flex align-items-center py-3">
            @if (Loading)
            {
                <div class="d-flex align-items-center">
                    <div class="mr-2 text-muted">@L["Loading..."]</div>
                    <div class="spinner spinner-dark mr-10"></div>
                </div>
            }

            @if (ShowPageSizeOption)
            {
                <select @onchange="PageSizeSelected" class="form-control form-control-sm font-weight-bold mr-4 border-0 bg-light" style="width: 75px;">
                    <option value="@DefaultPageSize" selected>@DefaultPageSize</option>
                    <option value="@(DefaultPageSize * 2)">@(DefaultPageSize * 2)</option>
                    <option value="@(DefaultPageSize * 3)">@(DefaultPageSize * 3)</option>
                    <option value="@(DefaultPageSize * 5)">@(DefaultPageSize * 5)</option>
                    <option value="@(DefaultPageSize * 10)">@(DefaultPageSize * 10)</option>
                </select>
            }
            <span class="text-muted">@L["Displaying {0} - {1} of {2} records", ((Page * _pageSize) - _pageSize + 1) , Math.Min((Page * _pageSize),Count), Count]</span>
        </div>
    }
</div>
<!--end:: Pagination-->
@code{
    [Parameter]
    public int Page { get; set; }
    [Parameter]
    public EventCallback<PaginationInfo> Action{ get; set; }
    [Parameter]
    public long Count { get; set; }
    [Parameter]
    public int DefaultPageSize { get; set; } = 10;
    [Parameter]
    public bool ShowDisplayInfo { get; set; } = true;
    [Parameter]
    public bool ShowPageSizeOption { get; set; } = true;
    [Parameter]
    public bool Loading { get; set; } = false;

    private int _pageSize = 10;

    protected override void OnInitialized()
    {
        _pageSize = DefaultPageSize;
        base.OnInitialized();
    }

    private async Task GoTo(int target)
    {
        double max2 = (double)Count / _pageSize;
        int max = (int)Math.Ceiling((double)Count / _pageSize);
        if (target < 1)
        {
            target = 1;
        }
        else if (target > max)
            target = max;
        await Action.InvokeAsync(new PaginationInfo(target, _pageSize));
    }
    private async Task PageSizeSelected(ChangeEventArgs e)
    {
        _pageSize = int.Parse(e.Value.ToString());
        await GoTo(Page);
    }

    private bool IsLastPage()
    {
        long max = (long)Math.Ceiling((double)Count / _pageSize);
        return max == Page;
    }

    private bool IsFirstPage()
    {
        return Page <= 1;
    }
}